# This script runs when microshift-aio-hostcrio.service is started

#!/bin/bash
set -euxo pipefail

# Function to get Linux distribution
get_distro() {
    DISTRO=$(egrep '^(ID)=' /etc/os-release| sed 's/"//g' | cut -f2 -d"=")
    if [[ $DISTRO != @(rhel|fedora|centos|ubuntu) ]]
    then
      echo "This Linux distro is not supported by the install script"
      exit 1
    fi

}

# Function to get system architecture
get_arch() {
    ARCH=$(uname -m)
}

# Install CRI-O depending on the distro
install_crio() {
    case $DISTRO in
      "fedora")
        sudo dnf module -y enable cri-o:1.20
        sudo dnf install -y cri-o cri-tools
      ;;
      "rhel")
        sudo dnf install cri-o cri-tools -y
      ;;
      "centos")
        CRIOVERSION=1.20
        OS=CentOS_8_Stream
        sudo curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/devel:kubic:libcontainers:stable.repo
        sudo curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:$CRIOVERSION.repo https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$CRIOVERSION/$OS/devel:kubic:libcontainers:stable:cri-o:$CRIOVERSION.repo
        sudo dnf install -y cri-o cri-tools
      ;;
      "ubuntu")
        CRIOVERSION=1.20
        OS=xUbuntu_20.04
        echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /" > devel:kubic:libcontainers:stable.list
        sudo mv devel:kubic:libcontainers:stable.list /etc/apt/sources.list.d/
        echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$CRIOVERSION/$OS/ /" > devel:kubic:libcontainers:stable:cri-o:$CRIOVERSION.list
        sudo mv devel:kubic:libcontainers:stable:cri-o:$CRIOVERSION.list /etc/apt/sources.list.d/

        curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$CRIOVERSION/$OS/Release.key | sudo apt-key add -
        curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | sudo apt-key add -

        sudo apt-get update -y
        # Vagrant Ubuntu VMs don't provide containernetworking-plugins by default
        sudo apt-get install -y cri-o cri-o-runc cri-tools containernetworking-plugins
      ;;
    esac
}

# CRI-O config to match Microshift networking values
crio_conf() {
    sudo sh -c 'cat << EOF > /etc/cni/net.d/100-crio-bridge.conf
{
    "cniVersion": "0.4.0",
    "name": "crio",
    "type": "bridge",
    "bridge": "cni0",
    "isGateway": true,
    "ipMasq": true,
    "hairpinMode": true,
    "ipam": {
        "type": "host-local",
        "routes": [
            { "dst": "0.0.0.0/0" }
        ],
        "ranges": [
            [{ "subnet": "10.42.0.0/24" }]
        ]
    }
}
EOF'
    
     if [ "$DISTRO" == "rhel" ]; then
        sudo sed -i 's|/usr/libexec/crio/conmon|/usr/bin/conmon|' /etc/crio/crio.conf 
     fi
}

# Start CRI-O
verify_crio() {
    sudo systemctl enable crio
    sudo systemctl restart crio
}

# Install kubectl
install_kubectl() {
    ARCH=$(uname -m |sed -e "s/x86_64/amd64/" |sed -e "s/aarch64/arm64/") && \
    curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/${ARCH}/kubectl" && \
    chmod +x ./kubectl && \
    mv ./kubectl /usr/bin/kubectl
}

# Start microshift
start_microshift() {
setsebool -P container_manage_cgroup true

if ! /usr/bin/podman volume exists microshift-data
then
  /usr/bin/podman volume create microshift-data
fi

[[ -d /etc/microshift-aio ]] || mkdir /etc/microshift-aio

/usr/bin/podman run -d --rm \
  --name microshift-aio --privileged \
  -v /lib/modules:/lib/modules \
  -v microshift-data:/var/lib \
  -v /etc/crio:/etc/crio:Z \
  --label "io.containers.autoupdate=registry" \
  -p 6443:6443 quay.io/sallyom/microshift:aio-hostcrio

cat <<EOF > /etc/microshift-aio/microshift-aio.conf
export KUBECONFIG=$(/usr/bin/podman volume inspect microshift-vol --format "{{.Mountpoint}}")/microshift/resources/kubeadmin/kubeconfig
EOF
}

# Script execution
get_distro
get_arch
if [ "$DISTRO" = "rhel" ]; then
    register_subs
fi
install_crio
crio_conf
verify_crio
install_kubectl
start_microshift
